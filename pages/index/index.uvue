<template>
	<view class="container">
		<view class="header">
			<text class="title">Our Love Story</text>
			<text class="lovers-name">冯浩文❤️卢悦</text>
			<text class="subtitle">2025年1月1日 22:21:00</text>
		</view>
		
		<view class="time-container">
			<view class="time-row">
				<view class="time-box">
					<text class="time-number">{{ years }}</text>
					<text class="time-label">年</text>
				</view>
				<view class="time-box">
					<text class="time-number">{{ months }}</text>
					<text class="time-label">月</text>
				</view>
				<view class="time-box">
					<text class="time-number">{{ days }}</text>
					<text class="time-label">天</text>
				</view>
			</view>
			
			<view class="time-row">
				<view class="time-box">
					<text class="time-number">{{ hours }}</text>
					<text class="time-label">时</text>
				</view>
				<view class="time-box">
					<text class="time-number">{{ minutes }}</text>
					<text class="time-label">分</text>
				</view>
				<view class="time-box">
					<text class="time-number">{{ seconds }}</text>
					<text class="time-label">秒</text>
				</view>
			</view>
			
			<view class="milliseconds-container">
				<text class="milliseconds">{{ milliseconds }}</text>
				<text class="ms-label">毫秒</text>
			</view>
		</view>

		<view class="love-quote">
			<text class="quote-text">时光飞逝，爱永恒</text>
			<text class="quote-author">— Love Timeline —</text>
		</view>
	</view>
</template>

<script lang="uts">
	export default {
		data() {
			return {
				targetDate: '2025-01-01 22:21:00',
				timer: 0,
				years: '00',
				months: '00',
				days: '00',
				hours: '00',
				minutes: '00',
				seconds: '00',
				milliseconds: '000'
			}
		},
		onLoad() {
			this.startTimer()
		},
		onUnload() {
			clearInterval(this.timer)
		},
		methods: {
			startTimer() {
				if (this.timer) {
					clearInterval(this.timer)
				}
				
				this.timer = setInterval(() => {
					const target = new Date(this.targetDate).getTime()
					const now = new Date().getTime()
					const diff = Math.abs(target - now)
					
					const msPerSecond = 1000
					const msPerMinute = msPerSecond * 60
					const msPerHour = msPerMinute * 60
					const msPerDay = msPerHour * 24
					const msPerMonth = msPerDay * 30.436875
					const msPerYear = msPerDay * 365.25

					const years = Math.floor(diff / msPerYear)
					const months = Math.floor((diff % msPerYear) / msPerMonth)
					const days = Math.floor((diff % msPerMonth) / msPerDay)
					const hours = Math.floor((diff % msPerDay) / msPerHour)
					const minutes = Math.floor((diff % msPerHour) / msPerMinute)
					const seconds = Math.floor((diff % msPerMinute) / msPerSecond)
					const milliseconds = diff % msPerSecond

					this.years = years.toString().padStart(2, '0')
					this.months = months.toString().padStart(2, '0')
					this.days = days.toString().padStart(2, '0')
					this.hours = hours.toString().padStart(2, '0')
					this.minutes = minutes.toString().padStart(2, '0')
					this.seconds = seconds.toString().padStart(2, '0')
					this.milliseconds = milliseconds.toString().padStart(3, '0')
				}, 16)
			}
		}
	}
</script>

<style>
	.container {
		flex: 1;
		background: linear-gradient(
			135deg, 
			#1a1a2e 0%,    /* 深蓝黑色 */
			#16213e 50%,   /* 靛蓝色 */
			#1a1a2e 100%  /* 深蓝黑色 */
		);
		padding: 30px;
		flex-direction: column;
		align-items: center;
	}

	.header {
		margin-bottom: 50px;
		align-items: center;
	}

	.title {
		font-size: 32px;
		font-weight: bold;
		color: #e6c200;
		margin-bottom: 10px;
	}

	.lovers-name {
		font-size: 24px;
		color: #ff69b4;  /* 粉色调 */
		margin-bottom: 10px;
		font-weight: bold;
	}

	.subtitle {
		font-size: 18px;
		color: #cccccc;
	}

	.time-container {
		width: 100%;
		flex-direction: column;
		gap: 20px;
		margin-bottom: 40px;
	}

	.time-row {
		flex-direction: row;
		justify-content: space-between;
		gap: 15px;
	}

	.time-box {
		flex: 1;
		background: linear-gradient(145deg, 
			rgba(42, 42, 66, 0.9), 
			rgba(31, 31, 49, 0.9)
		);
		border-radius: 15px;
		padding: 20px;
		align-items: center;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
		border: 1px solid rgba(255, 255, 255, 0.1);  /* 添加微妙的边框 */
	}

	.time-number {
		font-size: 36px;
		font-weight: bold;
		color: #e6c200;
		font-family: 'Helvetica';
	}

	.time-label {
		font-size: 14px;
		color: #888888;
		margin-top: 5px;
	}

	.milliseconds-container {
		background: linear-gradient(145deg, 
			rgba(42, 42, 66, 0.9), 
			rgba(31, 31, 49, 0.9)
		);
		border-radius: 15px;
		padding: 15px;
		align-items: center;
		margin-top: 10px;
		border: 1px solid rgba(255, 255, 255, 0.1);  /* 添加微妙的边框 */
	}

	.milliseconds {
		font-size: 28px;
		color: #e6c200;
		font-family: 'Helvetica';
	}

	.ms-label {
		font-size: 12px;
		color: #888888;
		margin-top: 5px;
	}

	.love-quote {
		margin-top: 40px;
		align-items: center;
	}

	.quote-text {
		font-size: 18px;
		color: #cccccc;
		margin-bottom: 10px;
	}

	.quote-author {
		font-size: 14px;
		color: #888888;
		font-style: italic;
	}
</style>
